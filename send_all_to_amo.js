const fs = require('fs');
const path = require('path');
const cfg = require('./config');

const HANDLERS_DIR = path.join(__dirname, 'handlers');
const MERGED_DIR = path.join(__dirname, 'merged_diff');

(async () => {
  for (const pipeline of cfg.PIPELINES) {
    const handlerFile = pipeline.name + '.js';
    const handlerPath = path.join(HANDLERS_DIR, handlerFile);
    const dataFile = path.join(MERGED_DIR, pipeline.name + '.json');

    if (!fs.existsSync(handlerPath)) {
      console.warn(`‚ö†Ô∏è –•–µ–Ω–¥–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${handlerFile} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      continue;
    }

    if (!fs.existsSync(dataFile)) {
      console.warn(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${pipeline.name}.json ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      continue;
    }

    const rows = JSON.parse(fs.readFileSync(dataFile, 'utf8'));

    try {
      const handler = require(handlerPath);
      if (typeof handler !== 'function') {
        console.error(`‚ùå –•–µ–Ω–¥–ª–µ—Ä ${handlerFile} –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è`);
        continue;
      }

      console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Ö–µ–Ω–¥–ª–µ—Ä–∞ ${handlerFile} —Å ${rows.length} —Å—Ç—Ä–æ–∫–∞–º–∏`);
      await handler(rows);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ ${handlerFile}: ${err.message}`);
    }
  }

  console.log('‚úÖ –í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã');
})();