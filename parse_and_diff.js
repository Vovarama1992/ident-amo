const fs = require('fs');
const path = require('path');
const iconv = require('iconv-lite');
const cfg = require('./config');

const inputDir    = path.join(__dirname, cfg.OUTPUT);
const previousDir = path.join(__dirname, cfg.PREVIOUS);
const diffDir     = path.join(__dirname, cfg.DIFF);

if (!fs.existsSync(previousDir)) fs.mkdirSync(previousDir, { recursive: true });
if (!fs.existsSync(diffDir)) fs.mkdirSync(diffDir, { recursive: true });

function parseTSV(tsv) {
  const lines = tsv.trim().split(/\r?\n/);
  if (lines.length === 0) return [];

  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–º—É —Å–ª–µ—à—É '\'
  const headers = lines[0].split('\\').map(h => h.trim());
  const data = [];

  for (let i = 1; i < lines.length; i++) {
    const cols = lines[i].split('\\');
    if (cols.length !== headers.length) {
      console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ ‚Äî –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ (${cols.length} vs ${headers.length})`);
      continue;
    }
    const obj = {};
    for (let j = 0; j < headers.length; j++) {
      obj[headers[j]] = cols[j]?.trim() ?? null;
    }
    data.push(obj);
  }
  return data;
}

function loadJSON(filePath, fallback = []) {
  try {
    if (fs.existsSync(filePath)) {
      const raw = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(raw);
    }
  } catch {
    // –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–∞–¥–æ
  }
  return fallback;
}

function saveJSON(filePath, data) {
  fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
}

function getIdField(tableName) {
  switch (tableName.toLowerCase()) {
    case 'patients': return 'ID_Persons';
    case 'orderpaymentsjournal': return 'ID_Orders';
    case 'persons': return 'ID_Persons';  // –¥–æ–±–∞–≤—å —Å—é–¥–∞
    default: return 'ID';
  }
}

function findNewRows(current, previous, idField) {
  const prevIds = new Set(previous.map(r => r[idField]));
  return current.filter(r => r[idField] && !prevIds.has(r[idField]));
}

let totalNew = 0;
for (const { name: tableRaw } of cfg.ROOTS) {
  const table = tableRaw.toLowerCase();
  const filePath = path.join(inputDir, `${tableRaw}.tsv`);
  if (!fs.existsSync(filePath)) {
    console.warn(`‚ö†Ô∏è –§–∞–π–ª ${tableRaw}.tsv –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫`);
    continue;
  }

  const rawBuffer = fs.readFileSync(filePath);
  const decoded = iconv.decode(rawBuffer, 'win1251');
  const current = parseTSV(decoded);

  const prevPath = path.join(previousDir, `${tableRaw}.json`);
  const previous = loadJSON(prevPath);

  const idField = getIdField(table);
  console.log(`üìÑ ${tableRaw}: –≤—Å–µ–≥–æ ${current.length}, –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö ${previous.length}, idField=${idField}`);

  const fresh = findNewRows(current, previous, idField);
  console.log(`üÜï ${tableRaw}: –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ ${fresh.length}`);

  saveJSON(prevPath, current);

  if (fresh.length > 0) {
    const limited = fresh.slice(0, 10);
    saveJSON(path.join(diffDir, `${tableRaw}.json`), limited);
    totalNew += limited.length;
    console.log(`‚úÇÔ∏è ${tableRaw}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –¥–∏—Ñ—Ñ ${limited.length} –∏–∑ ${fresh.length}`);
  }
}

console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ. –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö: ${totalNew}`);